.. change::
    :tags: bug, orm
    :tickets: 8703, 8997, 8996

    A series of changes and improvements regarding
    :meth:`_orm.Session.refresh`. The overall change is that primary key
    attributes for an object are now included in a refresh operation
    unconditionally when relationship-bound attributes are to be refreshed,
    even if not expired and even if not specified in the refresh.

    * Improved :meth:`_orm.Session.refresh` so that if autoflush is enabled
      (as is the default for :class:`_orm.Session`), the autoflush takes place
      at an earlier part of the refresh process so that pending primary key
      changes are applied without errors being raised.  Previously, this
      autoflush took place too late in the process and the SELECT statement
      would not use the correct key to locate the row and an
      :class:`.InvalidRequestError` would be raised.

    * When the above condition is present, that is, unflushed primary key
      changes are present on the object, but autoflush is not enabled,
      the refresh() method now explicitly disallows the operation to proceed,
      and an informative :class:`.InvalidRequestError` is raised asking that
      the pending primary key changes be flushed first.  Previously,
      this use case was simply broken and :class:`.InvalidRequestError`
      would be raised anyway. This restriction is so that it's safe for the
      primary key attributes to be refreshed, as is necessary for the case of
      being able to refresh the object with relationship-bound secondary
      eagerloaders also being emitted. This rule applies in all cases to keep
      API behavior consistent regardless of whether or not the PK cols are
      actually needed in the refresh, as it is unusual to be refreshing
      some attributes on an object while keeping other attributes "pending"
      in any case.

    * The :meth:`_orm.Session.refresh` method has been enhanced such that
      attributes which are :func:`_orm.relationship`-bound and linked to an
      eager loader, either at mapping time or via last-used loader options,
      will be refreshed in all cases even when a list of attributes is passed
      that does not include any columns on the parent row. This builds upon the
      feature first implemented for non-column attributes as part of
      :ticket:`1763` fixed in 1.4 allowing eagerly-loaded relationship-bound
      attributes to participate in the :meth:`_orm.Session.refresh` operation.
      If the refresh operation does not indicate any columns on the parent row
      to be refreshed, the primary key columns will nonetheless be included
      in the refresh operation, which allows the load to proceed into the
      secondary relationship loaders indicated as it does normally.
      Previously an :class:`.InvalidRequestError` error would be raised
      for this condition (:ticket:`8703`)

    * Fixed issue where an unnecessary additional SELECT would be emitted in
      the case where :meth:`_orm.Session.refresh` were called with a
      combination of expired attributes, as well as an eager loader such as
      :func:`_orm.selectinload` that emits a "secondary" query, if the primary
      key attributes were also in an expired state.  As the primary key
      attributes are now included in the refresh automatically, there is no
      additional load for these attributes when a relationship loader
      goes to select for them (:ticket:`8997`)

    * Fixed regression caused by :ticket:`8126` released in 2.0.0b1 where the
      :meth:`_orm.Session.refresh` method would fail with an
      ``AttributeError``, if passed both an expired column name as well as the
      name of a relationship-bound attribute that was linked to a "secondary"
      eagerloader such as the :func:`_orm.selectinload` eager loader
      (:ticket:`8996`)
